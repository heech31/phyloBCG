length( qmptree$edge.length)
qmptree$edge.length
c(qmptree$tip.label,qmptree$node.label)
cbind( c(qmptree$tip.label,qmptree$node.label[-1]), qmptree$edge.length )
## Read tree generated from phyloT (https://phylot.biobyte.de)#
qmptree <- ape::read.tree("newickSPRING.txt")#
str(qmptree)#
h <- plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
str(qmptree)#
#
p <- length(qmptree$tip.label)#
#############################################
## Set length 1 for all edges#
#############################################
qmptree$edge.length <- rep(1,dim(qmptree$edge)[1])#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
qmptree$edge[,2]
qmptree$edge[,2] == loc
qmptree$edge[,2] == loc +
qmptree$edge[,2] == loc + p
qmptree$edge[,2] == loc + p
#############################################
loc <- which( qmptree$node.label == "Betaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
## Read tree generated from phyloT (https://phylot.biobyte.de)#
qmptree <- ape::read.tree("newickSPRING.txt")#
str(qmptree)#
h <- plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
str(qmptree)#
#
p <- length(qmptree$tip.label)#
#############################################
## Set length 1 for all edges#
#############################################
qmptree$edge.length <- rep(1,dim(qmptree$edge)[1])#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
#############################################
## Set length 2 for Betaproteobacteria,#
## Gammaproteobacteria, Bacteroidia, Terrabacteria_group#
#############################################
loc <- which( qmptree$node.label == "Betaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Gammaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
cbind( c(qmptree$tip.label,qmptree$node.label[-1]), qmptree$edge.length )#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Euryarchaeota" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Proteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Terrabacteria_group" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Fusobacteriales" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,1] == loc + p ) ] <- 3#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Fusobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,3] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Fusobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Fusobacteriales" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 1#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Fusobacteriales" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,1] == loc + p ) ] <- 1#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Fusobacteriaceae" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "Akkermansiaceae" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,1] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "cellular_organism" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 0.01
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "cellular_organism" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 0.01#
qmptree$node.label[1] <- ""#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "cellular_organism" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 10.01#
qmptree$node.label[1] <- ""#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
which( qmptree$node.label == "cellular_organism" )
loc <- which( qmptree$node.label == "cellular_organisms" )#
qmptree$node.label[loc]
loc <- which( qmptree$node.label == "cellular_organisms" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 10.01#
qmptree$node.label[1] <- ""
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$node.label == "cellular_organisms" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 0.01#
qmptree$node.label[1] <- ""#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
qmptree$tip.label#
qmptree$edge.length[ qmptree$edge[,2]<=p ] <- qmptree$edge.length[ qmptree$edge[,2]<=p ]/2
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
# Pruning QMP dataset#
#
rm(list=ls())#
#
setwd("/Users/heecheolchung/Dropbox/Research/TAMU/graphical/QMPdata/")#
library(phyloseq)#
library(matlab)#
load("qmphealthyrank6pruned.RData")#
#
library(ape)#
library(phangorn)#
library(stringr)#
#################################################
###           Tree information            #######
#################################################
## Read tree generated from phyloT (https://phylot.biobyte.de)#
qmptree <- ape::read.tree("newickSPRING.txt")#
str(qmptree)#
h <- plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
str(qmptree)#
#
p <- length(qmptree$tip.label)#
#############################################
## Set length 1 for all edges#
#############################################
qmptree$edge.length <- rep(1,dim(qmptree$edge)[1])#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
#
#############################################
## Set length 2 for Betaproteobacteria,#
## Gammaproteobacteria, Bacteroidia, Terrabacteria_group#
#############################################
loc <- which( qmptree$node.label == "Betaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Gammaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
cbind( c(qmptree$tip.label,qmptree$node.label[-1]), qmptree$edge.length )#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
#############################################
## Set length 2 for Euryarchaeota, Proteobacteria#
##  Fusobacteriales#
#############################################
#
loc <- which( qmptree$node.label == "Euryarchaeota" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Proteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Terrabacteria_group" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Fusobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Fusobacteriaceae" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Akkermansiaceae" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,1] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
#############################################
## Set length of cellular_organism 0.1#
## #
#############################################
#
loc <- which( qmptree$node.label == "cellular_organisms" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 0.01#
qmptree$node.label[1] <- ""#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
#
#############################################
## Set length 0.5 for terminal nodes#
## #
#############################################
qmptree$tip.label
qmptree$edge.length[ qmptree$edge[,2]<=p ]
qmptree$edge[,2]<=p
qmptree$edge[,2]
p
qmptree$edge.length[ qmptree$edge[,2]<=p ]
loc <- which( qmptree$node.label == "Fusobacterium" )
qmptree$node.label[loc]
which( qmptree$tip.label == "Fusobacterium" )
qmptree$tip.label[loc]
loc <- which( qmptree$tip.label == "Fusobacterium" )
qmptree$tip.label[loc]
qmptree$edge.length[ which( qmptree$edge[,2] == loc ) ]
qmptree$edge.length[ which( qmptree$edge[,2] == loc ) ] <- 0.01
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
loc <- which( qmptree$tip.label == "Fusobacterium" )#
qmptree$tip.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc ) ] <- 1
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
qmptree$tip.label
qmptree$edge[,2]
qmptree$edge.length[ qmptree$edge[,2]<=p ]
# Pruning QMP dataset#
#
rm(list=ls())#
#
setwd("/Users/heecheolchung/Dropbox/Research/TAMU/graphical/QMPdata/")#
library(phyloseq)#
library(matlab)#
load("qmphealthyrank6pruned.RData")#
#
library(ape)#
library(phangorn)#
library(stringr)#
#################################################
###           Tree information            #######
#################################################
## Read tree generated from phyloT (https://phylot.biobyte.de)#
qmptree <- ape::read.tree("newickSPRING.txt")#
str(qmptree)#
h <- plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
str(qmptree)#
#
p <- length(qmptree$tip.label)#
#############################################
## Set length 1 for all edges#
#############################################
qmptree$edge.length <- rep(1,dim(qmptree$edge)[1])#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
#
#############################################
## Set length 2 for Betaproteobacteria,#
## Gammaproteobacteria, Bacteroidia, Terrabacteria_group#
#############################################
loc <- which( qmptree$node.label == "Betaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Gammaproteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
cbind( c(qmptree$tip.label,qmptree$node.label[-1]), qmptree$edge.length )#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
#############################################
## Set length 2 for Euryarchaeota, Proteobacteria#
##  Fusobacteriales#
#############################################
#
loc <- which( qmptree$node.label == "Euryarchaeota" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Proteobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Terrabacteria_group" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Fusobacteria" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Fusobacteriaceae" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
loc <- which( qmptree$node.label == "Akkermansiaceae" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)#
#############################################
## Set length of cellular_organism 0.1#
## #
#############################################
#
loc <- which( qmptree$node.label == "cellular_organisms" )#
qmptree$node.label[loc]#
qmptree$edge.length[ which( qmptree$edge[,2] == loc + p ) ] <- 0.01#
qmptree$node.label[1] <- ""#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
qmptree$tip.label#
qmptree$edge.length[ qmptree$edge[,2]<=p ] <- qmptree$edge.length[ qmptree$edge[,2]<=p ]/2#
#
plot(qmptree, type="phylogram")#
nodelabels(qmptree$node.label, cex=0.8, adj=1)
# Extract Rank6: Genera names#
generaNames <- taxNames[,6]#
tmp_gn <- apply( matrix(generaNames),1, substring,4)
tmp_gn
tmp_gn[c(6,53)]#
tmp_gn[c(13,21)]
tmp_gn[c(6,53)]
tmp_gn[c(13,21)]
tmp_gn
tmp_gn[78]
tmp_gn[78] <- "Eubacterium"
qmptree$tip.label
setdiff( tmp_gn, qmptree$tip.label)
setdiff( qmptree$tip.label, tmp_gn)
## Replace NA by empty name#
tmp_gn[is.na(tmp_gn)] = ""#
#
rmFlag <-#
tmp_gn == ""              |#
tmp_gn == "cc_115"        |#
tmp_gn == "SMB53"         | #
tmp_gn == "[Prevotella]"  |#
tmp_gn == "[Ruminococcus]"
sum( !rmFlag )
length(qmptree$tip.label)
dim( QMP[,!rmFlag] )
dim(QMP)
## Replace NA by empty name#
tmp_gn[is.na(tmp_gn)] = ""#
#
rmFlag <-#
tmp_gn == ""              |#
tmp_gn == "cc_115"        |#
tmp_gn == "SMB53"         | #
tmp_gn == "[Prevotella]"  |#
tmp_gn == "[Ruminococcus]"#
#
sum( !rmFlag )#
length(qmptree$tip.label)#
dim( QMP[,!rmFlag] )#
#
QMP <- QMP[,!rmFlag]
tmp_gn
tmp_gn[rmFlag]
tmp_gn[!rmFlag]
!rmFlag
tmp_gn
tmp_gn[!rmFlag]
colnames(QMP) <-  tmp_gn[!rmFlag]
qmptree$tip.label
match( colnames(QMP), qmptree$tip.label )
reorderVar <- match( colnames(QMP), qmptree$tip.label )
colnames(QMP)[reorderVar]
qmptree$tip.label
reorderVar <- match( qmptree$tip.label, colnames(QMP) )
colnames(QMP)[reorderVar]
QMP
colnames(QMP)[reorderVar]
qmptree$tip.label
qmptree$tip.label
colnames(QMP)[reorderVar]
qmptree$tip.label
colnames(QMP)[reorderVar]
qmptree$tip.label
QMP <- QMP[,reorderVar]
library(phytools)#install.packages("phytools")#
#
nodes.heights <- cbind( qmptree$edge[,2], nodeHeights(qmptree)[,2] )#
#
lcas          <- mrca(qmptree,full=FALSE)
isSymmetric(lcas)
imagesc(lcas)
lcas[,1] <- lcas[1,]
isSymmetric(lcas)
H    <- lcas*0 # covariance matrix of tree nodes#
#
qmptree$node.label[ lcas[6,5]-51 ]#
qmptree$node.label[ lcas[5,6]-51 ]
for( i in 1:dim(lcas)[1]){#
		for( j in 1:dim(lcas)[2]){#
			lca <- lcas[i,j]#
			vtmp <- nodes.heights[ nodes.heights[,1] == lca, ]#
			v    <- 0#
			if( length(vtmp) != 0 ){#
				v <- v + vtmp[2]#
					}#
			H[i,j] <- v#
			}#
		}#
isSymmetric(H)
cov2cor(H)
solve( cov2cor(H) )
save.image("QMPtree.RData")
rm(list=ls())#
setwd("/general/home/hcchung/graphical/QMPdata/")#
funcPath   <- "/Users/heecheolchung/Dropbox/Research/TAMU/graphical/functions/"#
resultPath <- "/general/home/hcchung/graphical/QMPdata/results/"#
library(boot); library(tmvtnorm);#
library(huge) #install.packages("huge")#
library(igraph) #install.packages("igraph")#
library(BDgraph) #install.packages("BDgraph")#
library(plyr);library(ggplot2);library(reshape);library(gridExtra)#
source(paste(funcPath,"conditionalSample.R",sep=""))#
source(paste(funcPath,"SSVS.R",sep=""))#
source(paste(funcPath,"AlbertChib_mrg.R",sep=""))#
source(paste(funcPath,"treeGibbs.R",sep=""))
load("QMPtree.RData")
np <- dim(x)#
n  <- np[1] # Sample size#
p  <- np[2]  # Data dimension#
K <- 2   # Latent space dimension#
#
colnames(H)#
colnames(x)#
dim(x)#
qr(x)$rank#
burnin = 300#
nmc = 5000#
#
	set.seed( 77843 )#
#
	H_t     <- H#
	H_tinv  <- solve(H_t)#
	#########################################################################
	########   Parameters for precision matrix sampling #####################
	#########################################################################
#
	## Fix some hyperparameters#
	# Note that the parameterization used in the code is slightly different from those in Wang (2014).  )#
    h = 50 ^ 2    # (v0 in code) = (v0 in paper)^2#
    lambda = 1#
    #########################################################################
    ########         Hyper parameters (fixed)               #################
    #########################################################################
    IGp = rep(1e-2,2) # Inv-gamma parameters for tree scale parameter (sigma2)#
    v0alpha <- 0.01   # Inv-gamma parameters for the spike and slab (v0)#
	v0beta  <- 0.01#
	bt <- Sys.time()#
	#########################################################################
	########           Data Generation                  #####################
	#########################################################################
		deltahat <- qnorm( colSums( x == 0 )/n )#
		eFx  <- apply(x,2,ecdf)#
		eFxx <- Map(function(f,x) do.call(f, list(x)), eFx, alply(x,2)  )#
		zhat <- matrix( unlist( lapply(eFxx,function(pr) qnorm( ( n/(n+1) )*pr ) ) ), n, p)#
		#########################################################################
		########   Initial values for gibbs sampling ############################
		#########################################################################
#
		R_mc     <- cor(zhat)#
		zhat_mc  <- zhat # #
		deltahat <- qnorm( colSums( x==0 )/n )#
#
		v0_mc   <- 0.01#
#
		tau_mc  <- h*v0_mc*matrix(1,p,p)#
#
		pijk_mc <- matrix( 2 / (p - 1),p,p)#
#
		U_mc <- rmvnorm(2, rep(0,p), H_t )#
		sig2_mc <- 1#
		gibbsSample <- treeGibbs(x, zhat, deltahat, zhat_mc, R_mc, v0_mc, h, #
                                tau_mc, pijk_mc, U_mc, sig2_mc, burnin, nmc, verbose=FALSE)#
#
		Wtmp <- 1*( (Reduce("+" , alply(gibbsSample$E_gibbs[,,],3) )/dim(gibbsSample$E_gibbs)[3]) > 0.5 )#
#
		edgeHat  <- Wtmp[ upper.tri(Wtmp) ]#
#
		OmegaHat <- ( Reduce("+" , alply(gibbsSample$C_gibbs[,,],3) )/dim(gibbsSample$C_gibbs)[3] )
rm(list=ls())#
setwd("/general/home/hcchung/graphical/QMPdata/")#
funcPath   <- "/Users/heecheolchung/Dropbox/Research/TAMU/graphical/functions/"#
resultPath <- "/general/home/hcchung/graphical/QMPdata/results/"#
library(boot); library(tmvtnorm);#
library(huge) #install.packages("huge")#
library(igraph) #install.packages("igraph")#
library(BDgraph) #install.packages("BDgraph")#
library(plyr);library(ggplot2);library(reshape);library(gridExtra)#
source(paste(funcPath,"conditionalSample.R",sep=""))#
source(paste(funcPath,"SSVS.R",sep=""))#
source(paste(funcPath,"AlbertChib_mrg.R",sep=""))#
source(paste(funcPath,"treeGibbs.R",sep=""))#
#
#load("QMPtree.RData")#
#load("QMPtree2.RData")#
x <- QMP
load("QMPtree.RData")
x <- QMP
dim(x)
np <- dim(x)#
n  <- np[1] # Sample size#
p  <- np[2]  # Data dimension#
K <- 2   # Latent space dimension#
#
colnames(H)#
colnames(x)#
dim(x)#
qr(x)$rank#
burnin = 300#
nmc = 5000#
#
	set.seed( 77843 )#
#
	H_t     <- H#
	H_tinv  <- solve(H_t)#
	#########################################################################
	########   Parameters for precision matrix sampling #####################
	#########################################################################
#
	## Fix some hyperparameters#
	# Note that the parameterization used in the code is slightly different from those in Wang (2014).  )#
    h = 50 ^ 2    # (v0 in code) = (v0 in paper)^2#
    lambda = 1#
    #########################################################################
    ########         Hyper parameters (fixed)               #################
    #########################################################################
    IGp = rep(1e-2,2) # Inv-gamma parameters for tree scale parameter (sigma2)#
    v0alpha <- 0.01   # Inv-gamma parameters for the spike and slab (v0)#
	v0beta  <- 0.01#
	bt <- Sys.time()#
	#########################################################################
	########           Data Generation                  #####################
	#########################################################################
		deltahat <- qnorm( colSums( x == 0 )/n )#
		eFx  <- apply(x,2,ecdf)#
		eFxx <- Map(function(f,x) do.call(f, list(x)), eFx, alply(x,2)  )#
		zhat <- matrix( unlist( lapply(eFxx,function(pr) qnorm( ( n/(n+1) )*pr ) ) ), n, p)#
		#########################################################################
		########   Initial values for gibbs sampling ############################
		#########################################################################
#
		R_mc     <- cor(zhat)#
		zhat_mc  <- zhat # #
		deltahat <- qnorm( colSums( x==0 )/n )#
#
		v0_mc   <- 0.01#
#
		tau_mc  <- h*v0_mc*matrix(1,p,p)#
#
		pijk_mc <- matrix( 2 / (p - 1),p,p)#
#
		U_mc <- rmvnorm(2, rep(0,p), H_t )#
		sig2_mc <- 1#
		gibbsSample <- treeGibbs(x, zhat, deltahat, zhat_mc, R_mc, v0_mc, h, #
                                tau_mc, pijk_mc, U_mc, sig2_mc, burnin, nmc, verbose=FALSE)#
#
		Wtmp <- 1*( (Reduce("+" , alply(gibbsSample$E_gibbs[,,],3) )/dim(gibbsSample$E_gibbs)[3]) > 0.5 )#
#
		edgeHat  <- Wtmp[ upper.tri(Wtmp) ]#
#
		OmegaHat <- ( Reduce("+" , alply(gibbsSample$C_gibbs[,,],3) )/dim(gibbsSample$C_gibbs)[3] )
str(gibbsSample)
plot( gibbsSample$v0_gibbs )
plot( gibbsSample$sig2_gibbs )
Wtmp <- 1*( (Reduce("+" , alply(gibbsSample$E_gibbs[,,],3) )/dim(gibbsSample$E_gibbs)[3]) > 0.8 )#
colnames(Wtmp) <- colnames(x)
graph <- graph_from_adjacency_matrix( Wtmp, mode="undirected",  diag=FALSE,#
		  add.colnames=TRUE)#
#
plot( graph, layout=layout_in_circle, vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_kk, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_nicely, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_nicely, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_nicely, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_nicely, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_mds, vertex.size=1,vertex.label=colnames(x) )
plot( graph, layout=layout_with_graphopt, vertex.size=0.5,vertex.label=colnames(x) )
plot( graph, layout=layout_with_graphopt, vertex.size=0.5,vertex.label=colnames(x) )
plot( graph, layout=layout_with_graphopt, vertex.size=0.5,vertex.label=colnames(x) )
plot( graph, layout=layout_with_graphopt, vertex.size=0.5,vertex.label=colnames(x) )
plot( graph, layout=layout_with_fr, vertex.size=0.5,vertex.label=colnames(x) )
plot( graph, layout=layout_with_fr, vertex.size=0.5,vertex.label=colnames(x) )
plot( graph, layout=layout_with_fr, vertex.size=0.5,vertex.label=colnames(x) )
library(ggplot2)#
library(corpcor) #install.packages("corpcor")#
gg_color_hue <- function(n) {#
  hues = seq(15, 375, length = n + 1)#
  hcl(h = hues, l = 65, c = 100)[1:n]#
}#
#
cols <- gg_color_hue(20)#
Wtmp <- 1*( (Reduce("+" , alply(gibbsSample$E_gibbs[,,],3) )/dim(gibbsSample$E_gibbs)[3]) > 0.5 )#
OmegaHat <- ( Reduce("+" , alply(gibbsSample$C_gibbs[,,],3) )/dim(gibbsSample$C_gibbs)[3] )#
#
SigmaHat <- ( Reduce("+" , alply(gibbsSample$R_gibbs[,,],3) )/dim(gibbsSample$R_gibbs)[3] )#
parCor <- cor2pcor(SigmaHat)#
#
colnames(parCor) <- colnames(x)#
rownames(parCor) <- colnames(x)#
#
############################################################################
############### Partial Correlation matrix#
############################################################################
tmpp  <- parCor#
tmpp[abs(tmpp)<0.2] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )#
#
melted_parCor$X1#
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )#
		 ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
ii <-0#
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
!is.na(tmpp[,ii])
[!is.na(tmpp[,ii])]
tmpp[,ii][!is.na(tmpp[,ii])]
names(tmpp[,ii][!is.na(tmpp[,ii])])
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
ii <-0#
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
(ii <- ii + 1)#
colnames(x)[ii]#
tmpp[,ii][!is.na(tmpp[,ii])]#
names(tmpp[,ii][!is.na(tmpp[,ii])])#
plot(qmptree, tip.color=1*(!is.na(tmpp[,ii]) ) + 1)
ggplot(data=melted_Cor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
Wtmp <- 1*( (Reduce("+" , alply(gibbsSample$E_gibbs[,,],3) )/dim(gibbsSample$E_gibbs)[3]) > 0.5 )#
OmegaHat <- ( Reduce("+" , alply(gibbsSample$C_gibbs[,,],3) )/dim(gibbsSample$C_gibbs)[3] )#
#
SigmaHat <- ( Reduce("+" , alply(gibbsSample$R_gibbs[,,],3) )/dim(gibbsSample$R_gibbs)[3] )#
parCor <- cor2pcor(SigmaHat)#
#
colnames(parCor) <- colnames(x)#
rownames(parCor) <- colnames(x)#
#
############################################################################
############### Partial Correlation matrix#
############################################################################
tmpp  <- parCor#
tmpp[abs(tmpp)<0.2] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )#
#
melted_parCor$X1#
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )#
		 ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
Wtmp <- 1*( (Reduce("+" , alply(gibbsSample$E_gibbs[,,],3) )/dim(gibbsSample$E_gibbs)[3]) > 0.5 )#
OmegaHat <- ( Reduce("+" , alply(gibbsSample$C_gibbs[,,],3) )/dim(gibbsSample$C_gibbs)[3] )#
#
SigmaHat <- ( Reduce("+" , alply(gibbsSample$R_gibbs[,,],3) )/dim(gibbsSample$R_gibbs)[3] )#
parCor <- cor2pcor(SigmaHat)#
#
colnames(parCor) <- colnames(x)#
rownames(parCor) <- colnames(x)
############################################################################
############### Partial Correlation matrix#
############################################################################
tmpp  <- parCor#
tmpp[abs(tmpp)<0.2] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=18),axis.text.x = element_text(angle=50, hjust=1) )
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=15),axis.text.x = element_text(angle=50, hjust=1) )
pCor< -	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=15),axis.text.x = element_text(angle=50, hjust=1) )
getwd()
pdf("pCorBGC.pdf", width=8, height=8)#
pCor#
dev.off()
pCor< -	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=15),axis.text.x = element_text(angle=50, hjust=1) )#
#
pdf("pCorBGC.pdf", width=8, height=8)#
pCor#
dev.off()
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=15),axis.text.x = element_text(angle=50, hjust=1) )#
#
pdf("pCorBGC.pdf", width=8, height=8)#
pCor#
dev.off()
dev.off()
dev.off()
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=50, hjust=1) )
pdf("pCorBGC.pdf", width=8, height=9)
pCor
dev.off()
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="black" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=50, hjust=1) )
pdf("pCorBGC.pdf", width=10, height=9)
pCor
dev.off()
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=50, hjust=1) )#
#
pdf("pCorBGC.pdf", width=10, height=9)#
pCor#
dev.off()
pdf("pCorBGC.pdf", width=12, height=9)#
pCor#
dev.off()
save.image("QMPtreeResults.RData")
# Like in Figure 3 in Nature paper "Quantitative microbiome profiling" paper by Vandeputte et al. in 2017.#
# Create a tile figure in our manuscript#
rm(list=ls())#
#
# library(devtools)#
# install_github("zdk123/SpiecEasi")#
# library(SpiecEasi)#
#
#if (!requireNamespace("BiocManager", quietly = TRUE))#
#    install.packages("BiocManager")#
#
#BiocManager::install("phyloseq")#
#
library(phyloseq) # extract genera name from phyloseq format data#
library(ggplot2) # draw tile figure#
library(Matrix) # for triu and tril functions#
library(gtable) # to add the box for ordered genera#
library(SpiecEasi) # install.packages("SpiecEasi")#
#
# Figure 6 in our manuscript.#
# 1. SpiecEasi on compositional v.s. SPRING on quantitative #
setwd("/Users/heecheolchung/Dropbox/Research/TAMU/copulaLDA/")#
load("Data/SPRINGpaper_tile/qmphealthyrank6pruned.rdata") # only contains 106 samples (Health_status = Healthy )#
# load X and QMP, qmphealthy6_only1filt#
#
load("Data/SPRINGpaper_tile/QMP_SE.rdata") # se1.copyadj#
ls()#
load("Data/SPRINGpaper_tile/QMP_SPRING_on_quantitative.rdata") # Kcor, lambdaK, out1.K_count, fit1.K_count#
# For StARS criterion#
thresh = 0.1#
# According to the threshold, find opt.index and save adjacency matrix and coefficient among the path.#
opt.SE <- max(which(se1.copyadj$select$stars$summary<thresh))#
opt.K <- max(which(out1.K_count$stars$summary<thresh))#
#
adj.SE <- se1.copyadj$est$path[[opt.SE]]; adj.SE <- as.matrix(adj.SE)#
adj.K <- fit1.K_count$est$path[[opt.K]]; adj.K <- as.matrix(adj.K)#
#
Coef.SE <- SpiecEasi::symBeta(se1.copyadj$est$beta[[opt.SE]], mode='maxabs') # isSymmetric(Coef.SE)#
Coef.SE <- as.matrix(Coef.SE)#
Coef.K <- SpiecEasi::symBeta(out1.K_count$est$beta[[opt.K]], mode='maxabs') # isSymmetric(Coef.K)#
Coef.K <- as.matrix(Coef.K)#
#
# For all genera, table for matching/mismatching signs between SE and SPRING#
table(cbind.data.frame(SpiecEasi = as.numeric(sign(Coef.SE[upper.tri(Coef.SE)])), SPRING = as.numeric(sign(Coef.K[upper.tri(Coef.K)]))))#
#
# Extract the genera names  ??tax_table#
taxainfo <- tax_table(qmphealthy6_only1filt)#
genusnamesall <- substring(tax_table(qmphealthy6_only1filt)[, 6], 4)#
### Change the genera name with parenthethis to with a number 2.#
whereparenthesis <- which(substring(genusnamesall, 1, 1) == "[")#
for ( ii in 1:length(whereparenthesis)){#
  len <- length(unlist(strsplit(genusnamesall[whereparenthesis[ii]], "")))#
  tmp <- substring(genusnamesall[whereparenthesis[ii]], 2, len-1)#
  genusnamesall[whereparenthesis[ii]] <- paste(tmp, 2)#
}#
### Remove genera which do not have names or NAs.#
p <- dim(Coef.SE)[1]#
genus_NA <- which(is.na(tax_table(qmphealthy6_only1filt)[, 6]))#
genus_noname <- which(substr(tax_table(qmphealthy6_only1filt)[, 6], start = 4, stop = 5) == "")#
genusname <- (1:p)[-sort(union(genus_NA, genus_noname))]#
#
GenusCoef.SE <- Coef.SE[genusname, genusname]#
GenusCoef.K <- Coef.K[genusname, genusname]#
QMP_genusname <- QMP[, genusname]#
# Save the extracted genera name to their column names and row names#
colnames(GenusCoef.SE) <- rownames(GenusCoef.SE) <- genusnamesall[genusname]#
colnames(GenusCoef.K) <- rownames(GenusCoef.K) <- genusnamesall[genusname]#
#
# Screen the genera which has at least one partial correlation larger than corthresh = 0.2.#
corthresh = 0.2#
isover_0.2 <- which(apply(GenusCoef.SE, 1, function(x) any( abs(x) > corthresh)) | apply(GenusCoef.K, 1, function(x) any(abs(x) > corthresh)))#
#
# Order genera based on the total abundance#
abundanceord <- order(colSums(QMP_genusname[, isover_0.2]), decreasing = TRUE)#
# To check if ordering is correctly done. Should be zero#
# sum(colSums(QMP_genusname[, isover_0.2[abundanceord]]) != sort(colSums(QMP_genusname[, isover_0.2[abundanceord]]), decreasing = TRUE))#
#
# Coef matrices for only screened genera (has at least one partial correlation larger than corthresh = 0.2)#
GenusCoef.SE_selected <- GenusCoef.SE[isover_0.2[abundanceord], isover_0.2[abundanceord]]#
GenusCoef.K_selected <- GenusCoef.K[isover_0.2[abundanceord], isover_0.2[abundanceord]]#
# Create a matrix to draw tile figure.#
# SE is in lower matrix and SPRING in upper matrix.#
TileMat <- matrix(0, ncol = length(isover_0.2), nrow = length(isover_0.2))#
TileMat[lower.tri(TileMat)] <- as.matrix(GenusCoef.SE_selected)[lower.tri(GenusCoef.SE_selected)]#
TileMat[upper.tri(TileMat)] <- as.matrix(GenusCoef.K_selected)[upper.tri(GenusCoef.K_selected)]#
#
# create a coordinate vectors for geom_tile#
coord <- cbind(rowv = rep(rownames(GenusCoef.K_selected), each = length(isover_0.2)), #
               colv = rep(rownames(GenusCoef.K_selected), length(isover_0.2)))#
df_Tilemat <- cbind.data.frame(coord, partialcorr = c(TileMat))#
#
# rows start from bottom to top and cols start from left to right.#
# but we want start from the left top corner for both triangles. So make colv factor in reverse level.#
df_Tilemat$rowv <- factor(df_Tilemat$rowv, levels = rownames(GenusCoef.K_selected))#
df_Tilemat$colv <- factor(df_Tilemat$colv, levels = rev(rownames(GenusCoef.K_selected)))#
#
### disagreement table#
# For genera (which have at least one partial correlation larger than corthresh = 0.2), table for matching/mismatching signs between SE and SPRING#
table(cbind.data.frame(SpiecEasi = as.numeric(sign(GenusCoef.SE_selected[upper.tri(GenusCoef.SE_selected)])),#
                       SPRING = as.numeric(sign(GenusCoef.K_selected[upper.tri(GenusCoef.K_selected)]))))#
#
#               SPRING#
# SpiecEasi  -1   0   1#
#         -1   1   5   0#
#         0    2 440  16#
#         1    0  13  19#
#
library(xtable)#
xtable(table(cbind.data.frame(SpiecEasi = as.numeric(sign(GenusCoef.SE_selected[upper.tri(GenusCoef.SE_selected)])),#
                              SPRING = as.numeric(sign(GenusCoef.K_selected[upper.tri(GenusCoef.K_selected)]))))#
)
p02 <- length(isover_0.2)#
tile1 <- ggplot(df_Tilemat, aes(x = rowv, y = colv), fill = partialcorr) +        ## global aes#
  geom_tile(aes(fill = partialcorr), color = "black", alpha = 1, width = 1, height = 1) +         ## to get the rect filled#
  scale_fill_gradient2(high = "blue", mid = "white", low = "red", name = "Partial Correlation") +       ## color of the corresponding aes#
  coord_cartesian(xlim = c(1, p02), ylim = c(1, p02), clip = 'off') + #
  theme_bw() +#
  theme(axis.text.x.top = element_text(angle = 90, vjust = 0.5, hjust = 0), #
        axis.title.x=element_blank(),#
        axis.title.y=element_blank(),#
        legend.position = c(-0.2, 1.25), legend.justification="left", legend.direction="horizontal", plot.margin = margin(1, 1, 1, 0, "cm")) + #
  annotate("text", x = (p02+2)/2, y = -0.7, label = "SpiecEasi") + #
  annotate("text", x = p02+1.5, y = (p02+2)/2, angle = 90, label = "SPRING on Quantitative counts") + #
  scale_x_discrete(position = "top") + #
  scale_alpha_continuous(guide=FALSE) +  scale_size_continuous(guide=FALSE) + #
  geom_segment(aes(x=0.5, y=(p02+0.5), xend = (p02+0.5), yend=0.5), color="grey", size = 0.5)
tile1
GenusCoef
GenusCoef.K_selected
GenusCoef.K_selected
colnames(GenusCoef.K_selected)
generaNames
generaSpring <- colnames(GenusCoef.K_selected)
order(generaSpring)
generaSpring[ order(generaSpring) ]
reorderSpring <- order(generaSpring)
GenusCoef.SE_selected[reorderSpring,reorderSpring]
GenusCoef.SE_selected <- GenusCoef.SE_selected[reorderSpring,reorderSpring]#
GenusCoef.K_selected  <- GenusCoef.K_selected[reorderSpring,reorderSpring]
TileMat <- matrix(0, ncol = length(isover_0.2), nrow = length(isover_0.2))#
TileMat[lower.tri(TileMat)] <- as.matrix(GenusCoef.SE_selected)[lower.tri(GenusCoef.SE_selected)]#
TileMat[upper.tri(TileMat)] <- as.matrix(GenusCoef.K_selected)[upper.tri(GenusCoef.K_selected)]#
#
# create a coordinate vectors for geom_tile#
coord <- cbind(rowv = rep(rownames(GenusCoef.K_selected), each = length(isover_0.2)), #
               colv = rep(rownames(GenusCoef.K_selected), length(isover_0.2)))#
df_Tilemat <- cbind.data.frame(coord, partialcorr = c(TileMat))#
#
# rows start from bottom to top and cols start from left to right.#
# but we want start from the left top corner for both triangles. So make colv factor in reverse level.#
df_Tilemat$rowv <- factor(df_Tilemat$rowv, levels = rownames(GenusCoef.K_selected))#
df_Tilemat$colv <- factor(df_Tilemat$colv, levels = rev(rownames(GenusCoef.K_selected)))#
#
### disagreement table#
# For genera (which have at least one partial correlation larger than corthresh = 0.2), table for matching/mismatching signs between SE and SPRING#
table(cbind.data.frame(SpiecEasi = as.numeric(sign(GenusCoef.SE_selected[upper.tri(GenusCoef.SE_selected)])),#
                       SPRING = as.numeric(sign(GenusCoef.K_selected[upper.tri(GenusCoef.K_selected)]))))
library(xtable)#
xtable(table(cbind.data.frame(SpiecEasi = as.numeric(sign(GenusCoef.SE_selected[upper.tri(GenusCoef.SE_selected)])),#
                              SPRING = as.numeric(sign(GenusCoef.K_selected[upper.tri(GenusCoef.K_selected)]))))#
)
p02 <- length(isover_0.2)#
tile1 <- ggplot(df_Tilemat, aes(x = rowv, y = colv), fill = partialcorr) +        ## global aes#
  geom_tile(aes(fill = partialcorr), color = "black", alpha = 1, width = 1, height = 1) +         ## to get the rect filled#
  scale_fill_gradient2(high = "blue", mid = "white", low = "red", name = "Partial Correlation") +       ## color of the corresponding aes#
  coord_cartesian(xlim = c(1, p02), ylim = c(1, p02), clip = 'off') + #
  theme_bw() +#
  theme(axis.text.x.top = element_text(angle = 90, vjust = 0.5, hjust = 0), #
        axis.title.x=element_blank(),#
        axis.title.y=element_blank(),#
        legend.position = c(-0.2, 1.25), legend.justification="left", legend.direction="horizontal", plot.margin = margin(1, 1, 1, 0, "cm")) + #
  annotate("text", x = (p02+2)/2, y = -0.7, label = "SpiecEasi") + #
  annotate("text", x = p02+1.5, y = (p02+2)/2, angle = 90, label = "SPRING on Quantitative counts") + #
  scale_x_discrete(position = "top") + #
  scale_alpha_continuous(guide=FALSE) +  scale_size_continuous(guide=FALSE) + #
  geom_segment(aes(x=0.5, y=(p02+0.5), xend = (p02+0.5), yend=0.5), color="grey", size = 0.5)#
#
# Uncomment the following two lines when only you want to update the figure.#
# pdf(file = "Writeup/figures/Tile_SE_vs_SPRING.pdf", width = 8, height = 8)#
tile1#
# dev.off()
getwd()
pdf(file = "Tile_SE_vs_SPRING_reordered.pdf", width = 8, height = 8)#
tile1#
dev.off()
load('~/Dropbox/Research/TAMU/graphical/QMPdata/QMPtreeResults.RData')
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=50, hjust=1) ) + #
			scale_x_discrete(position = "top")
pCor
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=140, hjust=1) ) + #
			scale_x_discrete(position = "top")
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=0, hjust=1) ) + #
			scale_x_discrete(position = "top")
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=90, hjust=1) ) + #
			scale_x_discrete(position = "top")
ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=90, hjust=0) ) + #
			scale_x_discrete(position = "top")
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=90, hjust=0) ) + #
			scale_x_discrete(position = "top")
pdf("pCorBGC.pdf", width=12, height=9)#
 pCor#
 dev.off()
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.4,0.4), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=90, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")
pdf("pCorBGC.pdf", width=12, height=9)
pCor
dev.off()
max(parCor)
utri(parCor)
upper.tri(parCor)
parCor[ upper.tri(parCor) ]
abs( parCor[ upper.tri(parCor) ] )
summary(abs( parCor[ upper.tri(parCor) ] ) )
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=90, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")
pdf("pCorBGC.pdf", width=12, height=9)
pCor
dev.off()
setwd("/general/home/hcchung/graphical/QMPdata/")
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=100, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC.pdf", width=12, height=9)#
pCor#
dev.off()
setwd("/Users/heecheolchung/Dropbox/Research/TAMU/graphical/QMPdata/")
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=100, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC.pdf", width=12, height=9)#
pCor#
dev.off()
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=70, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC.pdf", width=12, height=9)#
pCor#
dev.off()
summary(abs( parCor[ upper.tri(parCor) ] ) )
tmpp  <- parCor#
tmpp[abs(tmpp)<0.1] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )#
#
summary(abs( parCor[ upper.tri(parCor) ] ) )#
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )#
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=70, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC.pdf", width=12, height=9)#
pCor#
dev.off()
############################################################################
############### Partial Correlation matrix#
############################################################################
tmpp  <- parCor#
pcor_thresh <- 0.1#
tmpp[abs(tmpp)<pcor_thresh] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )#
#
summary(abs( parCor[ upper.tri(parCor) ] ) )#
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )#
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=70, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC_0.1.pdf", width=12, height=9)#
pCor#
dev.off()#
############################################################################
############### Partial Correlation matrix#
############################################################################
tmpp  <- parCor#
pcor_thresh <- 0.2#
tmpp[abs(tmpp)<pcor_thresh] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )#
#
summary(abs( parCor[ upper.tri(parCor) ] ) )#
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )#
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=70, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC_0.2.pdf", width=12, height=9)#
pCor#
dev.off()
############################################################################
############### Partial Correlation matrix#
############################################################################
tmpp  <- parCor#
pcor_thresh <- 0.15#
tmpp[abs(tmpp)<pcor_thresh] <- NA#
melted_parCor <- reshape::melt( tmpp[,p:1]  )#
#
summary(abs( parCor[ upper.tri(parCor) ] ) )#
melted_parCor$X2 <-#
factor( melted_parCor$X2, levels = rev( levels(melted_parCor$X2) ) )#
pCor <-	    ggplot(data=melted_parCor, aes(X1,X2) ) + geom_tile(aes(fill=value), color="gray" ) +#
			scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, #
			,na.value="white", limit = c(-0.5,0.5), space = "Lab", name="Values") +#
			ggtitle("Partial Correlation") +#
			theme(text=element_text(size=12),axis.text.x = element_text(angle=70, hjust=0),#
			      axis.title.x=element_blank(), axis.title.y=element_blank() ) + #
			scale_x_discrete(position = "top")#
#
pdf("pCorBGC_0.15.pdf", width=12, height=9)#
pCor#
dev.off()
